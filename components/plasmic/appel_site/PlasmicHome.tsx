// @ts-nocheck
/* eslint-disable */
/* tslint:disable */
/* prettier-ignore-start */

/** @jsxRuntime classic */
/** @jsx createPlasmicElementProxy */
/** @jsxFrag React.Fragment */

// This class is auto-generated by Plasmic; please do not edit!
// Plasmic Project: wBRmoS7Qf8danpDnoXZLVz
// Component: cwWSae17Ytui

import * as React from "react";

import Head from "next/head";
import Link, { LinkProps } from "next/link";
import { useRouter } from "next/router";

import * as p from "@plasmicapp/react-web";
import * as ph from "@plasmicapp/react-web/lib/host";

import {
  hasVariant,
  classNames,
  wrapWithClassName,
  createPlasmicElementProxy,
  makeFragment,
  MultiChoiceArg,
  SingleBooleanChoiceArg,
  SingleChoiceArg,
  pick,
  omit,
  useTrigger,
  StrictProps,
  deriveRenderOpts,
  ensureGlobalVariants
} from "@plasmicapp/react-web";
import Button from "../../Button"; // plasmic-import: 2YS4YxHJgFKju/component
import { NavigationBar } from "@plasmicpkgs/plasmic-nav"; // plasmic-import: jGx9tiKJoex/codeComponent
import Footer from "../../Footer"; // plasmic-import: O8jRJZzkmVNu/component

import { useScreenVariants as useScreenVariantseH80Ck18IRB } from "./PlasmicGlobalVariant__Screen"; // plasmic-import: -eH80ck18iR_B/globalVariant

import "@plasmicapp/react-web/lib/plasmic.css";

import plasmic_library_plasmic_color_type_css from "../library_plasmic_color_type/plasmic_library_plasmic_color_type.module.css"; // plasmic-import: seaQhLVS4bbjiGvJJrRwyL/projectcss
import projectcss from "./plasmic_appel_site.module.css"; // plasmic-import: wBRmoS7Qf8danpDnoXZLVz/projectcss
import sty from "./PlasmicHome.module.css"; // plasmic-import: cwWSae17Ytui/css

import ChecksvgIcon from "./icons/PlasmicIcon__Checksvg"; // plasmic-import: nWUWSgWJ4hmrU/icon
import Icon38Icon from "./icons/PlasmicIcon__Icon38"; // plasmic-import: tjW8u0N4RQb/icon
import BarsIcon from "./icons/PlasmicIcon__Bars"; // plasmic-import: 4ZVpxMLEvcR9y/icon

createPlasmicElementProxy;

export type PlasmicHome__VariantMembers = {};
export type PlasmicHome__VariantsArgs = {};
type VariantPropType = keyof PlasmicHome__VariantsArgs;
export const PlasmicHome__VariantProps = new Array<VariantPropType>();

export type PlasmicHome__ArgsType = {};
type ArgPropType = keyof PlasmicHome__ArgsType;
export const PlasmicHome__ArgProps = new Array<ArgPropType>();

export type PlasmicHome__OverridesType = {
  root?: p.Flex<"div">;
  navigationBar?: p.Flex<typeof NavigationBar>;
  link?: p.Flex<"a"> & Partial<LinkProps>;
  columns?: p.Flex<"div">;
  footer?: p.Flex<typeof Footer>;
};

export interface DefaultHomeProps {}

const __wrapUserFunction =
  globalThis.__PlasmicWrapUserFunction ?? ((loc, fn) => fn());
const __wrapUserPromise =
  globalThis.__PlasmicWrapUserPromise ??
  (async (loc, promise) => {
    return await promise;
  });

function useNextRouter() {
  try {
    return useRouter();
  } catch {}
  return undefined;
}

function PlasmicHome__RenderFunc(props: {
  variants: PlasmicHome__VariantsArgs;
  args: PlasmicHome__ArgsType;
  overrides: PlasmicHome__OverridesType;
  forNode?: string;
}) {
  const { variants, overrides, forNode } = props;

  const args = React.useMemo(() => Object.assign({}, props.args), [props.args]);

  const $props = {
    ...args,
    ...variants
  };

  const __nextRouter = useNextRouter();
  const $ctx = ph.useDataEnv?.() || {};
  const refsRef = React.useRef({});
  const $refs = refsRef.current;

  const currentUser = p.useCurrentUser?.() || {};

  const globalVariants = ensureGlobalVariants({
    screen: useScreenVariantseH80Ck18IRB()
  });

  return (
    <React.Fragment>
      <Head>
        <meta name="twitter:card" content="summary" />
        <title key="title">{PlasmicHome.pageMetadata.title}</title>
        <meta
          key="og:title"
          property="og:title"
          content={PlasmicHome.pageMetadata.title}
        />
        <meta
          key="twitter:title"
          name="twitter:title"
          content={PlasmicHome.pageMetadata.title}
        />
      </Head>

      <style>{`
        body {
          margin: 0;
        }
      `}</style>

      <div className={projectcss.plasmic_page_wrapper}>
        <div
          data-plasmic-name={"root"}
          data-plasmic-override={overrides.root}
          data-plasmic-root={true}
          data-plasmic-for-node={forNode}
          className={classNames(
            projectcss.all,
            projectcss.root_reset,
            projectcss.plasmic_default_styles,
            projectcss.plasmic_mixins,
            projectcss.plasmic_tokens,
            plasmic_library_plasmic_color_type_css.plasmic_tokens,
            sty.root
          )}
        >
          <div className={classNames(projectcss.all, sty.freeBox__v6Zm)}>
            {(hasVariant(globalVariants, "screen", "mobile") ? true : false) ? (
              <p.Stack
                as={"div"}
                hasGap={true}
                className={classNames(projectcss.all, sty.freeBox__jlBcd)}
              >
                <p.Stack
                  as={"div"}
                  hasGap={true}
                  className={classNames(projectcss.all, sty.freeBox__nis5T)}
                >
                  {false ? (
                    <div
                      className={classNames(projectcss.all, sty.freeBox__mtRcN)}
                    >
                      <button
                        className={classNames(
                          projectcss.all,
                          projectcss.button,
                          projectcss.__wab_text,
                          sty.button__gJMh
                        )}
                      >
                        {"Sign up"}
                      </button>
                      {true ? (
                        <Button
                          className={classNames(
                            "__wab_instance",
                            sty.button__haZsO
                          )}
                          color={"clear" as const}
                          endIcon={
                            <Icon38Icon
                              className={classNames(
                                projectcss.all,
                                sty.svg___7ZMhw
                              )}
                              role={"img"}
                            />
                          }
                          startIcon={
                            <ChecksvgIcon
                              className={classNames(
                                projectcss.all,
                                sty.svg___00AHo
                              )}
                              role={"img"}
                            />
                          }
                          submitsForm={true}
                        >
                          <div
                            className={classNames(
                              projectcss.all,
                              projectcss.__wab_text,
                              sty.text__l5NVu
                            )}
                          >
                            {"Log in"}
                          </div>
                        </Button>
                      ) : null}
                    </div>
                  ) : null}
                  <NavigationBar
                    data-plasmic-name={"navigationBar"}
                    data-plasmic-override={overrides.navigationBar}
                    brand={
                      <p.PlasmicLink
                        data-plasmic-name={"link"}
                        data-plasmic-override={overrides.link}
                        className={classNames(
                          projectcss.all,
                          projectcss.a,
                          projectcss.__wab_text,
                          sty.link
                        )}
                        component={Link}
                        href={`/`}
                        platform={"nextjs"}
                      >
                        {"\u212e"}
                      </p.PlasmicLink>
                    }
                    className={classNames("__wab_instance", sty.navigationBar)}
                    closeButton={
                      <BarsIcon
                        className={classNames(projectcss.all, sty.svg__oZ4Fw)}
                        role={"img"}
                      />
                    }
                    forceOpenMenu={false}
                    itemsGap={8 as const}
                    menuItems={
                      <p.Stack
                        as={"div"}
                        hasGap={true}
                        className={classNames(
                          projectcss.all,
                          sty.freeBox__k13H
                        )}
                      >
                        <Button
                          className={classNames(
                            "__wab_instance",
                            sty.button__lxR9W
                          )}
                          color={"softSand" as const}
                          submitsForm={true}
                        >
                          {"Store"}
                        </Button>
                        <Button
                          className={classNames(
                            "__wab_instance",
                            sty.button__h3MNt
                          )}
                          color={"softSand" as const}
                          submitsForm={true}
                        >
                          {"Appel"}
                        </Button>
                        <Button
                          className={classNames(
                            "__wab_instance",
                            sty.button__yipV0
                          )}
                          color={"softSand" as const}
                          submitsForm={true}
                        >
                          {"ePad"}
                        </Button>
                        <Button
                          className={classNames(
                            "__wab_instance",
                            sty.button__pzTzo
                          )}
                          color={"softSand" as const}
                          submitsForm={true}
                        >
                          {"eTop"}
                        </Button>
                        <Button
                          className={classNames(
                            "__wab_instance",
                            sty.button__iJ5LQ
                          )}
                          color={"blue" as const}
                          submitsForm={true}
                        >
                          {"Sign In"}
                        </Button>
                      </p.Stack>
                    }
                    openButton={
                      <BarsIcon
                        className={classNames(projectcss.all, sty.svg__cFskx)}
                        role={"img"}
                      />
                    }
                    responsiveBreakpoint={768 as const}
                  />
                </p.Stack>
              </p.Stack>
            ) : null}
            <p.Stack
              as={"div"}
              hasGap={true}
              className={classNames(projectcss.all, sty.freeBox__vTD)}
            >
              <div className={classNames(projectcss.all, sty.freeBox__zIgH)}>
                {(
                  hasVariant(globalVariants, "screen", "mobile") ? true : true
                ) ? (
                  <p.Stack
                    as={"div"}
                    hasGap={true}
                    className={classNames(projectcss.all, sty.freeBox__mrCc1)}
                  >
                    <p.Stack
                      as={"div"}
                      hasGap={true}
                      className={classNames(projectcss.all, sty.freeBox__pniGm)}
                    >
                      <div
                        className={classNames(
                          projectcss.all,
                          projectcss.__wab_text,
                          sty.text__gfoE
                        )}
                      >
                        {"\u212e"}
                      </div>
                      <p.Stack
                        as={"div"}
                        hasGap={true}
                        className={classNames(
                          projectcss.all,
                          sty.freeBox__yehx1
                        )}
                      >
                        <Button
                          className={classNames(
                            "__wab_instance",
                            sty.button__dTm2F
                          )}
                          color={"clear" as const}
                          endIcon={
                            <Icon38Icon
                              className={classNames(
                                projectcss.all,
                                sty.svg___5M9Co
                              )}
                              role={"img"}
                            />
                          }
                          startIcon={
                            <ChecksvgIcon
                              className={classNames(
                                projectcss.all,
                                sty.svg__vcaWg
                              )}
                              role={"img"}
                            />
                          }
                          submitsForm={true}
                        >
                          <div
                            className={classNames(
                              projectcss.all,
                              projectcss.__wab_text,
                              sty.text__xzvAs
                            )}
                          >
                            {"Store"}
                          </div>
                        </Button>
                        <Button
                          className={classNames(
                            "__wab_instance",
                            sty.button__qvJf3
                          )}
                          color={"clear" as const}
                          endIcon={
                            <Icon38Icon
                              className={classNames(
                                projectcss.all,
                                sty.svg__xqQs3
                              )}
                              role={"img"}
                            />
                          }
                          link={`/shop/appel`}
                          startIcon={
                            <ChecksvgIcon
                              className={classNames(
                                projectcss.all,
                                sty.svg__lCnJw
                              )}
                              role={"img"}
                            />
                          }
                          submitsForm={true}
                        >
                          <div
                            className={classNames(
                              projectcss.all,
                              projectcss.__wab_text,
                              sty.text__fsr54
                            )}
                          >
                            {"Appel"}
                          </div>
                        </Button>
                        <Button
                          className={classNames(
                            "__wab_instance",
                            sty.button__nw5Sk
                          )}
                          color={"clear" as const}
                          endIcon={
                            <Icon38Icon
                              className={classNames(
                                projectcss.all,
                                sty.svg___9JwhU
                              )}
                              role={"img"}
                            />
                          }
                          link={`/shop/epad`}
                          startIcon={
                            <ChecksvgIcon
                              className={classNames(
                                projectcss.all,
                                sty.svg__tnG1
                              )}
                              role={"img"}
                            />
                          }
                          submitsForm={true}
                        >
                          <div
                            className={classNames(
                              projectcss.all,
                              projectcss.__wab_text,
                              sty.text__bK15N
                            )}
                          >
                            {"ePad"}
                          </div>
                        </Button>
                        <Button
                          className={classNames(
                            "__wab_instance",
                            sty.button__kJqdY
                          )}
                          color={"clear" as const}
                          endIcon={
                            <Icon38Icon
                              className={classNames(
                                projectcss.all,
                                sty.svg__w6YZv
                              )}
                              role={"img"}
                            />
                          }
                          link={`/shop/etop`}
                          startIcon={
                            <ChecksvgIcon
                              className={classNames(
                                projectcss.all,
                                sty.svg__pRoyx
                              )}
                              role={"img"}
                            />
                          }
                          submitsForm={true}
                        >
                          <div
                            className={classNames(
                              projectcss.all,
                              projectcss.__wab_text,
                              sty.text__qhPed
                            )}
                          >
                            {"eTop"}
                          </div>
                        </Button>
                        <Button
                          className={classNames(
                            "__wab_instance",
                            sty.button__vC2V8
                          )}
                          color={"clear" as const}
                          endIcon={
                            <Icon38Icon
                              className={classNames(
                                projectcss.all,
                                sty.svg__tx3Or
                              )}
                              role={"img"}
                            />
                          }
                          startIcon={
                            <ChecksvgIcon
                              className={classNames(
                                projectcss.all,
                                sty.svg__jpXwL
                              )}
                              role={"img"}
                            />
                          }
                          submitsForm={true}
                        >
                          <div
                            className={classNames(
                              projectcss.all,
                              projectcss.__wab_text,
                              sty.text__syLcU
                            )}
                          >
                            {"eMax"}
                          </div>
                        </Button>
                        {(
                          hasVariant(globalVariants, "screen", "mobile")
                            ? true
                            : true
                        ) ? (
                          <Button
                            className={classNames(
                              "__wab_instance",
                              sty.button___3H7C8
                            )}
                            color={"clear" as const}
                            endIcon={
                              <Icon38Icon
                                className={classNames(
                                  projectcss.all,
                                  sty.svg__he2J9
                                )}
                                role={"img"}
                              />
                            }
                            link={`/login`}
                            startIcon={
                              <ChecksvgIcon
                                className={classNames(
                                  projectcss.all,
                                  sty.svg___3MeUz
                                )}
                                role={"img"}
                              />
                            }
                            submitsForm={true}
                          >
                            <div
                              className={classNames(
                                projectcss.all,
                                projectcss.__wab_text,
                                sty.text___9SnOx
                              )}
                            >
                              {"Log in"}
                            </div>
                          </Button>
                        ) : null}
                        <Button
                          className={classNames(
                            "__wab_instance",
                            sty.button__p4WLr
                          )}
                          endIcon={
                            <Icon38Icon
                              className={classNames(
                                projectcss.all,
                                sty.svg__c5Vmw
                              )}
                              role={"img"}
                            />
                          }
                          startIcon={
                            <ChecksvgIcon
                              className={classNames(
                                projectcss.all,
                                sty.svg__t6WF7
                              )}
                              role={"img"}
                            />
                          }
                          submitsForm={true}
                        >
                          <div
                            className={classNames(
                              projectcss.all,
                              projectcss.__wab_text,
                              sty.text__rJlKw
                            )}
                          >
                            {"Sign up"}
                          </div>
                        </Button>
                      </p.Stack>
                      {false ? (
                        <div
                          className={classNames(
                            projectcss.all,
                            sty.freeBox__qx2C3
                          )}
                        >
                          <button
                            className={classNames(
                              projectcss.all,
                              projectcss.button,
                              projectcss.__wab_text,
                              sty.button__ydOHa
                            )}
                          >
                            {"Sign up"}
                          </button>
                          {true ? (
                            <Button
                              className={classNames(
                                "__wab_instance",
                                sty.button__n2VWx
                              )}
                              color={"clear" as const}
                              endIcon={
                                <Icon38Icon
                                  className={classNames(
                                    projectcss.all,
                                    sty.svg___6E6Dm
                                  )}
                                  role={"img"}
                                />
                              }
                              startIcon={
                                <ChecksvgIcon
                                  className={classNames(
                                    projectcss.all,
                                    sty.svg__dDbGb
                                  )}
                                  role={"img"}
                                />
                              }
                              submitsForm={true}
                            >
                              <div
                                className={classNames(
                                  projectcss.all,
                                  projectcss.__wab_text,
                                  sty.text__c8Uhr
                                )}
                              >
                                {"Log in"}
                              </div>
                            </Button>
                          ) : null}
                        </div>
                      ) : null}
                    </p.Stack>
                  </p.Stack>
                ) : null}
                <div
                  className={classNames(projectcss.all, sty.freeBox__pzsY1)}
                />
              </div>
            </p.Stack>
            <p.Stack
              as={"div"}
              hasGap={true}
              className={classNames(projectcss.all, sty.freeBox__awRWg)}
            >
              <div
                className={classNames(projectcss.all, sty.freeBox__d9XBc)}
                loading={"lazy" as const}
              >
                <div
                  className={classNames(projectcss.all, sty.freeBox__tYPev)}
                />
              </div>
            </p.Stack>
            {true ? (
              <div className={classNames(projectcss.all, sty.freeBox__duoSr)}>
                <p.Stack
                  as={"div"}
                  data-plasmic-name={"columns"}
                  data-plasmic-override={overrides.columns}
                  hasGap={true}
                  className={classNames(projectcss.all, sty.columns)}
                >
                  <div
                    className={classNames(projectcss.all, sty.column__xZ3Bi)}
                  >
                    <div
                      className={classNames(projectcss.all, sty.freeBox__vrobv)}
                    >
                      <p.PlasmicImg
                        alt={""}
                        className={classNames(sty.img__qVNb)}
                        displayHeight={"auto" as const}
                        displayMaxHeight={"none" as const}
                        displayMaxWidth={"100%" as const}
                        displayMinHeight={"0" as const}
                        displayMinWidth={"0" as const}
                        displayWidth={"80px" as const}
                        loading={"lazy" as const}
                        src={{
                          src: "/plasmic/appel_site/images/appel2Propng.png",
                          fullWidth: 1749,
                          fullHeight: 3389,
                          aspectRatio: undefined
                        }}
                      />
                    </div>
                    <div
                      className={classNames(projectcss.all, sty.freeBox__eApPv)}
                    >
                      <h3
                        className={classNames(
                          projectcss.all,
                          projectcss.h3,
                          projectcss.__wab_text,
                          sty.h3__lmoJt
                        )}
                      >
                        {"Appel 2 Pro"}
                      </h3>
                      <div
                        className={classNames(
                          projectcss.all,
                          projectcss.__wab_text,
                          sty.text__jvEGy
                        )}
                      >
                        {"Pro Power, Pro Capabilities."}
                      </div>
                      <Button
                        className={classNames(
                          "__wab_instance",
                          sty.button__bV5F
                        )}
                        link={`/shop/appel/appel-2-pro`}
                        submitsForm={true}
                      >
                        <div
                          className={classNames(
                            projectcss.all,
                            projectcss.__wab_text,
                            sty.text__tiDiQ
                          )}
                        >
                          {"Buy Now"}
                        </div>
                      </Button>
                    </div>
                  </div>
                  <div className={classNames(projectcss.all, sty.column__l5B7)}>
                    <div
                      className={classNames(projectcss.all, sty.freeBox__uQvef)}
                    >
                      <p.PlasmicImg
                        alt={""}
                        className={classNames(sty.img__a8BAe)}
                        displayHeight={"auto" as const}
                        displayMaxHeight={"none" as const}
                        displayMaxWidth={"100%" as const}
                        displayMinHeight={"0" as const}
                        displayMinWidth={"0" as const}
                        displayWidth={"176px" as const}
                        loading={"lazy" as const}
                        src={{
                          src: "/plasmic/appel_site/images/epadpng.png",
                          fullWidth: 6800,
                          fullHeight: 6529,
                          aspectRatio: undefined
                        }}
                      />
                    </div>
                    <div
                      className={classNames(projectcss.all, sty.freeBox__apg8V)}
                    >
                      <h3
                        className={classNames(
                          projectcss.all,
                          projectcss.h3,
                          projectcss.__wab_text,
                          sty.h3__poG1
                        )}
                      >
                        {"ePad"}
                      </h3>
                      <div
                        className={classNames(
                          projectcss.all,
                          projectcss.__wab_text,
                          sty.text___4IxgT
                        )}
                      >
                        {"Your New Laptop."}
                      </div>
                      <Button
                        className={classNames(
                          "__wab_instance",
                          sty.button__bGgzS
                        )}
                        link={`/shop/epad/epad`}
                        submitsForm={true}
                      >
                        <div
                          className={classNames(
                            projectcss.all,
                            projectcss.__wab_text,
                            sty.text__eblEm
                          )}
                        >
                          {"Buy Now"}
                        </div>
                      </Button>
                    </div>
                  </div>
                  <div
                    className={classNames(projectcss.all, sty.column__li1Jk)}
                  >
                    <div
                      className={classNames(projectcss.all, sty.freeBox__s8BtF)}
                    >
                      <p.PlasmicImg
                        alt={""}
                        className={classNames(sty.img___4KChV)}
                        displayHeight={"auto" as const}
                        displayMaxHeight={"none" as const}
                        displayMaxWidth={"100%" as const}
                        displayMinHeight={"0" as const}
                        displayMinWidth={"0" as const}
                        displayWidth={"378px" as const}
                        loading={"lazy" as const}
                        src={{
                          src: "/plasmic/appel_site/images/macBookPro2021Png.png",
                          fullWidth: 2117,
                          fullHeight: 1240,
                          aspectRatio: undefined
                        }}
                      />
                    </div>
                    <div
                      className={classNames(projectcss.all, sty.freeBox__isg2E)}
                    >
                      <h3
                        className={classNames(
                          projectcss.all,
                          projectcss.h3,
                          projectcss.__wab_text,
                          sty.h3__taKy
                        )}
                      >
                        {"eTop Lite"}
                      </h3>
                      <div
                        className={classNames(
                          projectcss.all,
                          projectcss.__wab_text,
                          sty.text___2Wgk
                        )}
                      >
                        {"Simplicity at it's finest."}
                      </div>
                      <Button
                        className={classNames(
                          "__wab_instance",
                          sty.button__dwDn
                        )}
                        link={`/shop/etop/etop-lite`}
                        submitsForm={true}
                      >
                        <div
                          className={classNames(
                            projectcss.all,
                            projectcss.__wab_text,
                            sty.text__b713P
                          )}
                        >
                          {"Buy Now"}
                        </div>
                      </Button>
                    </div>
                  </div>
                  <div
                    className={classNames(projectcss.all, sty.column__wbSkg)}
                  >
                    <div
                      className={classNames(projectcss.all, sty.freeBox__tmZq2)}
                    >
                      <p.PlasmicImg
                        alt={""}
                        className={classNames(sty.img__uihOq)}
                        displayHeight={"auto" as const}
                        displayMaxHeight={"none" as const}
                        displayMaxWidth={"100%" as const}
                        displayMinHeight={"0" as const}
                        displayMinWidth={"0" as const}
                        displayWidth={"201px" as const}
                        loading={"lazy" as const}
                        src={{
                          src: "/plasmic/appel_site/images/pod11Png.png",
                          fullWidth: 299,
                          fullHeight: 314,
                          aspectRatio: undefined
                        }}
                      />
                    </div>
                    <div
                      className={classNames(projectcss.all, sty.freeBox__qTtm6)}
                    >
                      <h3
                        className={classNames(
                          projectcss.all,
                          projectcss.h3,
                          projectcss.__wab_text,
                          sty.h3___7JqWl
                        )}
                      >
                        {"eMax"}
                      </h3>
                      <div
                        className={classNames(
                          projectcss.all,
                          projectcss.__wab_text,
                          sty.text__qRcr7
                        )}
                      >
                        {"The Worlds Best Audio."}
                      </div>
                      <Button
                        className={classNames(
                          "__wab_instance",
                          sty.button__c1Wm
                        )}
                        submitsForm={true}
                      >
                        <div
                          className={classNames(
                            projectcss.all,
                            projectcss.__wab_text,
                            sty.text__eGhaQ
                          )}
                        >
                          {"Buy Now"}
                        </div>
                      </Button>
                    </div>
                  </div>
                </p.Stack>
              </div>
            ) : null}
            <Footer
              data-plasmic-name={"footer"}
              data-plasmic-override={overrides.footer}
              className={classNames("__wab_instance", sty.footer)}
            />
          </div>
        </div>
      </div>
    </React.Fragment>
  ) as React.ReactElement | null;
}

const PlasmicDescendants = {
  root: ["root", "navigationBar", "link", "columns", "footer"],
  navigationBar: ["navigationBar", "link"],
  link: ["link"],
  columns: ["columns"],
  footer: ["footer"]
} as const;
type NodeNameType = keyof typeof PlasmicDescendants;
type DescendantsType<T extends NodeNameType> =
  typeof PlasmicDescendants[T][number];
type NodeDefaultElementType = {
  root: "div";
  navigationBar: typeof NavigationBar;
  link: "a";
  columns: "div";
  footer: typeof Footer;
};

type ReservedPropsType = "variants" | "args" | "overrides";
type NodeOverridesType<T extends NodeNameType> = Pick<
  PlasmicHome__OverridesType,
  DescendantsType<T>
>;
type NodeComponentProps<T extends NodeNameType> =
  // Explicitly specify variants, args, and overrides as objects
  {
    variants?: PlasmicHome__VariantsArgs;
    args?: PlasmicHome__ArgsType;
    overrides?: NodeOverridesType<T>;
  } & Omit<PlasmicHome__VariantsArgs, ReservedPropsType> & // Specify variants directly as props
    /* Specify args directly as props*/ Omit<
      PlasmicHome__ArgsType,
      ReservedPropsType
    > &
    /* Specify overrides for each element directly as props*/ Omit<
      NodeOverridesType<T>,
      ReservedPropsType | VariantPropType | ArgPropType
    > &
    /* Specify props for the root element*/ Omit<
      Partial<React.ComponentProps<NodeDefaultElementType[T]>>,
      ReservedPropsType | VariantPropType | ArgPropType | DescendantsType<T>
    >;

function makeNodeComponent<NodeName extends NodeNameType>(nodeName: NodeName) {
  type PropsType = NodeComponentProps<NodeName> & { key?: React.Key };
  const func = function <T extends PropsType>(
    props: T & StrictProps<T, PropsType>
  ) {
    const { variants, args, overrides } = React.useMemo(
      () =>
        deriveRenderOpts(props, {
          name: nodeName,
          descendantNames: [...PlasmicDescendants[nodeName]],
          internalArgPropNames: PlasmicHome__ArgProps,
          internalVariantPropNames: PlasmicHome__VariantProps
        }),
      [props, nodeName]
    );
    return PlasmicHome__RenderFunc({
      variants,
      args,
      overrides,
      forNode: nodeName
    });
  };
  if (nodeName === "root") {
    func.displayName = "PlasmicHome";
  } else {
    func.displayName = `PlasmicHome.${nodeName}`;
  }
  return func;
}

export const PlasmicHome = Object.assign(
  // Top-level PlasmicHome renders the root element
  makeNodeComponent("root"),
  {
    // Helper components rendering sub-elements
    navigationBar: makeNodeComponent("navigationBar"),
    link: makeNodeComponent("link"),
    columns: makeNodeComponent("columns"),
    footer: makeNodeComponent("footer"),

    // Metadata about props expected for PlasmicHome
    internalVariantProps: PlasmicHome__VariantProps,
    internalArgProps: PlasmicHome__ArgProps,

    // Page metadata
    pageMetadata: {
      title: "Appel",
      description: "",
      ogImageSrc: "",
      canonical: ""
    }
  }
);

export default PlasmicHome;
/* prettier-ignore-end */
