// @ts-nocheck
/* eslint-disable */
/* tslint:disable */
/* prettier-ignore-start */

/** @jsxRuntime classic */
/** @jsx createPlasmicElementProxy */
/** @jsxFrag React.Fragment */

// This class is auto-generated by Plasmic; please do not edit!
// Plasmic Project: wBRmoS7Qf8danpDnoXZLVz
// Component: 6KmAq4PCH4et

import * as React from "react";

import Head from "next/head";
import Link, { LinkProps } from "next/link";
import { useRouter } from "next/router";

import {
  Flex as Flex__,
  MultiChoiceArg,
  PlasmicDataSourceContextProvider as PlasmicDataSourceContextProvider__,
  PlasmicIcon as PlasmicIcon__,
  PlasmicImg as PlasmicImg__,
  PlasmicLink as PlasmicLink__,
  PlasmicPageGuard as PlasmicPageGuard__,
  SingleBooleanChoiceArg,
  SingleChoiceArg,
  Stack as Stack__,
  StrictProps,
  Trans as Trans__,
  classNames,
  createPlasmicElementProxy,
  deriveRenderOpts,
  ensureGlobalVariants,
  generateOnMutateForSpec,
  generateStateOnChangeProp,
  generateStateOnChangePropForCodeComponents,
  generateStateValueProp,
  get as $stateGet,
  hasVariant,
  initializeCodeComponentStates,
  initializePlasmicStates,
  makeFragment,
  omit,
  pick,
  renderPlasmicSlot,
  set as $stateSet,
  useCurrentUser,
  useDollarState,
  usePlasmicTranslator,
  useTrigger,
  wrapWithClassName
} from "@plasmicapp/react-web";
import {
  DataCtxReader as DataCtxReader__,
  useDataEnv,
  useGlobalActions
} from "@plasmicapp/react-web/lib/host";

import Button from "../../Button"; // plasmic-import: 2YS4YxHJgFKju/component
import { NavigationBar } from "@plasmicpkgs/plasmic-nav";
import Footer from "../../Footer"; // plasmic-import: O8jRJZzkmVNu/component

import { useScreenVariants as useScreenVariantseH80Ck18IRB } from "./PlasmicGlobalVariant__Screen"; // plasmic-import: -eH80ck18iR_B/globalVariant

import "@plasmicapp/react-web/lib/plasmic.css";

import plasmic_library_plasmic_color_type_css from "../library_plasmic_color_type/plasmic_library_plasmic_color_type.module.css"; // plasmic-import: seaQhLVS4bbjiGvJJrRwyL/projectcss
import plasmic_antd_5_hostless_css from "../antd_5_hostless/plasmic_antd_5_hostless.module.css"; // plasmic-import: ohDidvG9XsCeFumugENU3J/projectcss
import projectcss from "./plasmic_appel_site.module.css"; // plasmic-import: wBRmoS7Qf8danpDnoXZLVz/projectcss
import sty from "./PlasmicDevelopers.module.css"; // plasmic-import: 6KmAq4PCH4et/css

import ChecksvgIcon from "./icons/PlasmicIcon__Checksvg"; // plasmic-import: nWUWSgWJ4hmrU/icon
import Icon38Icon from "./icons/PlasmicIcon__Icon38"; // plasmic-import: tjW8u0N4RQb/icon
import BarsIcon from "./icons/PlasmicIcon__Bars"; // plasmic-import: 4ZVpxMLEvcR9y/icon

createPlasmicElementProxy;

export type PlasmicDevelopers__VariantMembers = {};
export type PlasmicDevelopers__VariantsArgs = {};
type VariantPropType = keyof PlasmicDevelopers__VariantsArgs;
export const PlasmicDevelopers__VariantProps = new Array<VariantPropType>();

export type PlasmicDevelopers__ArgsType = {};
type ArgPropType = keyof PlasmicDevelopers__ArgsType;
export const PlasmicDevelopers__ArgProps = new Array<ArgPropType>();

export type PlasmicDevelopers__OverridesType = {
  root?: Flex__<"div">;
  navigationBar?: Flex__<typeof NavigationBar>;
  link?: Flex__<"a"> & Partial<LinkProps>;
  footer?: Flex__<typeof Footer>;
};

export interface DefaultDevelopersProps {}

const $$ = {};

function useNextRouter() {
  try {
    return useRouter();
  } catch {}
  return undefined;
}

function PlasmicDevelopers__RenderFunc(props: {
  variants: PlasmicDevelopers__VariantsArgs;
  args: PlasmicDevelopers__ArgsType;
  overrides: PlasmicDevelopers__OverridesType;
  forNode?: string;
}) {
  const { variants, overrides, forNode } = props;

  const args = React.useMemo(() => Object.assign({}, props.args), [props.args]);

  const $props = {
    ...args,
    ...variants
  };

  const __nextRouter = useNextRouter();
  const $ctx = useDataEnv?.() || {};
  const refsRef = React.useRef({});
  const $refs = refsRef.current;

  const globalVariants = ensureGlobalVariants({
    screen: useScreenVariantseH80Ck18IRB()
  });

  return (
    <React.Fragment>
      <Head>
        <meta name="twitter:card" content="summary" />
        <title key="title">{PlasmicDevelopers.pageMetadata.title}</title>
        <meta
          key="og:title"
          property="og:title"
          content={PlasmicDevelopers.pageMetadata.title}
        />
        <meta
          key="twitter:title"
          name="twitter:title"
          content={PlasmicDevelopers.pageMetadata.title}
        />
      </Head>

      <style>{`
        body {
          margin: 0;
        }
      `}</style>

      <div className={projectcss.plasmic_page_wrapper}>
        <div
          data-plasmic-name={"root"}
          data-plasmic-override={overrides.root}
          data-plasmic-root={true}
          data-plasmic-for-node={forNode}
          className={classNames(
            projectcss.all,
            projectcss.root_reset,
            projectcss.plasmic_default_styles,
            projectcss.plasmic_mixins,
            projectcss.plasmic_tokens,
            plasmic_library_plasmic_color_type_css.plasmic_tokens,
            plasmic_antd_5_hostless_css.plasmic_tokens,
            sty.root
          )}
        >
          <div className={classNames(projectcss.all, sty.freeBox__avnp1)}>
            {(hasVariant(globalVariants, "screen", "mobile") ? true : false) ? (
              <Stack__
                as={"div"}
                hasGap={true}
                className={classNames(projectcss.all, sty.freeBox__glnp0)}
              >
                <Stack__
                  as={"div"}
                  hasGap={true}
                  className={classNames(projectcss.all, sty.freeBox__ckfyH)}
                >
                  {false ? (
                    <div
                      className={classNames(projectcss.all, sty.freeBox__m43Yk)}
                    >
                      <button
                        className={classNames(
                          projectcss.all,
                          projectcss.button,
                          projectcss.__wab_text,
                          sty.button__ao1T2
                        )}
                      >
                        {"Sign up"}
                      </button>
                      <Button
                        className={classNames(
                          "__wab_instance",
                          sty.button__drkBz
                        )}
                        color={"clear"}
                        endIcon={
                          <Icon38Icon
                            className={classNames(
                              projectcss.all,
                              sty.svg__kJBuu
                            )}
                            role={"img"}
                          />
                        }
                        startIcon={
                          <ChecksvgIcon
                            className={classNames(
                              projectcss.all,
                              sty.svg__wjemh
                            )}
                            role={"img"}
                          />
                        }
                        submitsForm={true}
                      >
                        <div
                          className={classNames(
                            projectcss.all,
                            projectcss.__wab_text,
                            sty.text__cVZd
                          )}
                        >
                          {"Log in"}
                        </div>
                      </Button>
                    </div>
                  ) : null}
                  <NavigationBar
                    data-plasmic-name={"navigationBar"}
                    data-plasmic-override={overrides.navigationBar}
                    brand={
                      <PlasmicLink__
                        data-plasmic-name={"link"}
                        data-plasmic-override={overrides.link}
                        className={classNames(
                          projectcss.all,
                          projectcss.a,
                          projectcss.__wab_text,
                          sty.link
                        )}
                        component={Link}
                        href={`/`}
                        platform={"nextjs"}
                      >
                        {"\u212e"}
                      </PlasmicLink__>
                    }
                    className={classNames("__wab_instance", sty.navigationBar)}
                    closeButton={
                      <BarsIcon
                        className={classNames(projectcss.all, sty.svg__d52M5)}
                        role={"img"}
                      />
                    }
                    forceOpenMenu={false}
                    itemsGap={8}
                    menuItems={
                      <Stack__
                        as={"div"}
                        hasGap={true}
                        className={classNames(
                          projectcss.all,
                          sty.freeBox__ng1Kx
                        )}
                      >
                        <Button
                          className={classNames(
                            "__wab_instance",
                            sty.button___2LLia
                          )}
                          color={"softSand"}
                          submitsForm={true}
                        >
                          {"Store"}
                        </Button>
                        <Button
                          className={classNames(
                            "__wab_instance",
                            sty.button___9JihG
                          )}
                          color={"softSand"}
                          submitsForm={true}
                        >
                          {"Appel"}
                        </Button>
                        <Button
                          className={classNames(
                            "__wab_instance",
                            sty.button___4CLAm
                          )}
                          color={"softSand"}
                          submitsForm={true}
                        >
                          {"ePad"}
                        </Button>
                        <Button
                          className={classNames(
                            "__wab_instance",
                            sty.button__uLl6I
                          )}
                          color={"softSand"}
                          submitsForm={true}
                        >
                          {"eTop"}
                        </Button>
                        <Button
                          className={classNames(
                            "__wab_instance",
                            sty.button__x9W
                          )}
                          color={"blue"}
                          submitsForm={true}
                        >
                          {"Sign In"}
                        </Button>
                      </Stack__>
                    }
                    openButton={
                      <BarsIcon
                        className={classNames(projectcss.all, sty.svg__tcXrF)}
                        role={"img"}
                      />
                    }
                    responsiveBreakpoint={768}
                  />
                </Stack__>
              </Stack__>
            ) : null}
            <Stack__
              as={"div"}
              hasGap={true}
              className={classNames(projectcss.all, sty.freeBox__xizhj)}
            >
              <div className={classNames(projectcss.all, sty.freeBox__bFc0O)}>
                <Stack__
                  as={"div"}
                  hasGap={true}
                  className={classNames(projectcss.all, sty.freeBox__yyJ8O)}
                >
                  <Stack__
                    as={"div"}
                    hasGap={true}
                    className={classNames(projectcss.all, sty.freeBox__koLPi)}
                  >
                    <div
                      className={classNames(
                        projectcss.all,
                        projectcss.__wab_text,
                        sty.text__nH06M
                      )}
                    >
                      {"\u212e"}
                    </div>
                    <Stack__
                      as={"div"}
                      hasGap={true}
                      className={classNames(projectcss.all, sty.freeBox__rmvOv)}
                    >
                      <Button
                        className={classNames(
                          "__wab_instance",
                          sty.button__bo4QP
                        )}
                        color={"clear"}
                        endIcon={
                          <Icon38Icon
                            className={classNames(
                              projectcss.all,
                              sty.svg__zrdpa
                            )}
                            role={"img"}
                          />
                        }
                        startIcon={
                          <ChecksvgIcon
                            className={classNames(
                              projectcss.all,
                              sty.svg__hh8Fx
                            )}
                            role={"img"}
                          />
                        }
                        submitsForm={true}
                      >
                        <div
                          className={classNames(
                            projectcss.all,
                            projectcss.__wab_text,
                            sty.text___2Mrj
                          )}
                        >
                          {"eOS"}
                        </div>
                      </Button>
                      <Button
                        className={classNames(
                          "__wab_instance",
                          sty.button__uLl8Q
                        )}
                        color={"clear"}
                        endIcon={
                          <Icon38Icon
                            className={classNames(
                              projectcss.all,
                              sty.svg__t2Xj
                            )}
                            role={"img"}
                          />
                        }
                        link={`/developer/appos/public`}
                        startIcon={
                          <ChecksvgIcon
                            className={classNames(
                              projectcss.all,
                              sty.svg__l1Ejj
                            )}
                            role={"img"}
                          />
                        }
                        submitsForm={true}
                      >
                        <div
                          className={classNames(
                            projectcss.all,
                            projectcss.__wab_text,
                            sty.text__lq7Ud
                          )}
                        >
                          {"AppOS"}
                        </div>
                      </Button>
                      <Button
                        className={classNames(
                          "__wab_instance",
                          sty.button__t4CIk
                        )}
                        color={"clear"}
                        endIcon={
                          <Icon38Icon
                            className={classNames(
                              projectcss.all,
                              sty.svg__bPbmb
                            )}
                            role={"img"}
                          />
                        }
                        startIcon={
                          <ChecksvgIcon
                            className={classNames(
                              projectcss.all,
                              sty.svg___6X92C
                            )}
                            role={"img"}
                          />
                        }
                        submitsForm={true}
                      >
                        <div
                          className={classNames(
                            projectcss.all,
                            projectcss.__wab_text,
                            sty.text__redmB
                          )}
                        >
                          {"InVision"}
                        </div>
                      </Button>
                      <Button
                        className={classNames(
                          "__wab_instance",
                          sty.button__rdyD9
                        )}
                        color={"clear"}
                        endIcon={
                          <Icon38Icon
                            className={classNames(
                              projectcss.all,
                              sty.svg__owkwP
                            )}
                            role={"img"}
                          />
                        }
                        link={`/login`}
                        startIcon={
                          <ChecksvgIcon
                            className={classNames(
                              projectcss.all,
                              sty.svg__lnRd1
                            )}
                            role={"img"}
                          />
                        }
                        submitsForm={true}
                      >
                        <div
                          className={classNames(
                            projectcss.all,
                            projectcss.__wab_text,
                            sty.text__sxIm
                          )}
                        >
                          {"Log in"}
                        </div>
                      </Button>
                      <Button
                        className={classNames(
                          "__wab_instance",
                          sty.button___6N2Go
                        )}
                        endIcon={
                          <Icon38Icon
                            className={classNames(
                              projectcss.all,
                              sty.svg__x0Jjn
                            )}
                            role={"img"}
                          />
                        }
                        startIcon={
                          <ChecksvgIcon
                            className={classNames(
                              projectcss.all,
                              sty.svg___880D
                            )}
                            role={"img"}
                          />
                        }
                        submitsForm={true}
                      >
                        <div
                          className={classNames(
                            projectcss.all,
                            projectcss.__wab_text,
                            sty.text___9Yl6
                          )}
                        >
                          {"Sign up"}
                        </div>
                      </Button>
                    </Stack__>
                    {false ? (
                      <div
                        className={classNames(
                          projectcss.all,
                          sty.freeBox__xSuqX
                        )}
                      >
                        <button
                          className={classNames(
                            projectcss.all,
                            projectcss.button,
                            projectcss.__wab_text,
                            sty.button__w7CQr
                          )}
                        >
                          {"Sign up"}
                        </button>
                        <Button
                          className={classNames(
                            "__wab_instance",
                            sty.button__dAxEp
                          )}
                          color={"clear"}
                          endIcon={
                            <Icon38Icon
                              className={classNames(
                                projectcss.all,
                                sty.svg___7GIjb
                              )}
                              role={"img"}
                            />
                          }
                          startIcon={
                            <ChecksvgIcon
                              className={classNames(
                                projectcss.all,
                                sty.svg__rnLj
                              )}
                              role={"img"}
                            />
                          }
                          submitsForm={true}
                        >
                          <div
                            className={classNames(
                              projectcss.all,
                              projectcss.__wab_text,
                              sty.text__feT
                            )}
                          >
                            {"Log in"}
                          </div>
                        </Button>
                      </div>
                    ) : null}
                  </Stack__>
                </Stack__>
                <div
                  className={classNames(
                    projectcss.all,
                    projectcss.__wab_text,
                    sty.text__ajMy
                  )}
                >
                  {
                    "Mobile site is VERY VERY VERY VERY VERY BROKEN, only home page works sadly."
                  }
                </div>
              </div>
            </Stack__>
            <Stack__
              as={"div"}
              hasGap={true}
              className={classNames(projectcss.all, sty.freeBox__raPlz)}
            >
              <div
                className={classNames(projectcss.all, sty.freeBox___5FAgs)}
                loading={"lazy"}
              >
                <div
                  className={classNames(projectcss.all, sty.freeBox__pJvD)}
                />
              </div>
            </Stack__>
            <div className={classNames(projectcss.all, sty.freeBox__myxZ2)}>
              <div
                className={classNames(
                  projectcss.all,
                  projectcss.__wab_text,
                  sty.text__em6Fr
                )}
              >
                {
                  "SDK's are available for eOS beta and AppOS Beta, InVision and VisionOS are unavailable"
                }
              </div>
            </div>
            <Footer
              data-plasmic-name={"footer"}
              data-plasmic-override={overrides.footer}
              className={classNames("__wab_instance", sty.footer)}
            />
          </div>
          <div
            className={classNames(
              projectcss.all,
              projectcss.__wab_text,
              sty.text___2H7Wu
            )}
          >
            {"Enter some text"}
          </div>
        </div>
      </div>
    </React.Fragment>
  ) as React.ReactElement | null;
}

const PlasmicDescendants = {
  root: ["root", "navigationBar", "link", "footer"],
  navigationBar: ["navigationBar", "link"],
  link: ["link"],
  footer: ["footer"]
} as const;
type NodeNameType = keyof typeof PlasmicDescendants;
type DescendantsType<T extends NodeNameType> =
  (typeof PlasmicDescendants)[T][number];
type NodeDefaultElementType = {
  root: "div";
  navigationBar: typeof NavigationBar;
  link: "a";
  footer: typeof Footer;
};

type ReservedPropsType = "variants" | "args" | "overrides";
type NodeOverridesType<T extends NodeNameType> = Pick<
  PlasmicDevelopers__OverridesType,
  DescendantsType<T>
>;
type NodeComponentProps<T extends NodeNameType> =
  // Explicitly specify variants, args, and overrides as objects
  {
    variants?: PlasmicDevelopers__VariantsArgs;
    args?: PlasmicDevelopers__ArgsType;
    overrides?: NodeOverridesType<T>;
  } & Omit<PlasmicDevelopers__VariantsArgs, ReservedPropsType> & // Specify variants directly as props
    /* Specify args directly as props*/ Omit<
      PlasmicDevelopers__ArgsType,
      ReservedPropsType
    > &
    /* Specify overrides for each element directly as props*/ Omit<
      NodeOverridesType<T>,
      ReservedPropsType | VariantPropType | ArgPropType
    > &
    /* Specify props for the root element*/ Omit<
      Partial<React.ComponentProps<NodeDefaultElementType[T]>>,
      ReservedPropsType | VariantPropType | ArgPropType | DescendantsType<T>
    >;

function makeNodeComponent<NodeName extends NodeNameType>(nodeName: NodeName) {
  type PropsType = NodeComponentProps<NodeName> & { key?: React.Key };
  const func = function <T extends PropsType>(
    props: T & StrictProps<T, PropsType>
  ) {
    const { variants, args, overrides } = React.useMemo(
      () =>
        deriveRenderOpts(props, {
          name: nodeName,
          descendantNames: PlasmicDescendants[nodeName],
          internalArgPropNames: PlasmicDevelopers__ArgProps,
          internalVariantPropNames: PlasmicDevelopers__VariantProps
        }),
      [props, nodeName]
    );
    return PlasmicDevelopers__RenderFunc({
      variants,
      args,
      overrides,
      forNode: nodeName
    });
  };
  if (nodeName === "root") {
    func.displayName = "PlasmicDevelopers";
  } else {
    func.displayName = `PlasmicDevelopers.${nodeName}`;
  }
  return func;
}

export const PlasmicDevelopers = Object.assign(
  // Top-level PlasmicDevelopers renders the root element
  makeNodeComponent("root"),
  {
    // Helper components rendering sub-elements
    navigationBar: makeNodeComponent("navigationBar"),
    link: makeNodeComponent("link"),
    footer: makeNodeComponent("footer"),

    // Metadata about props expected for PlasmicDevelopers
    internalVariantProps: PlasmicDevelopers__VariantProps,
    internalArgProps: PlasmicDevelopers__ArgProps,

    // Page metadata
    pageMetadata: {
      title: "Appel - For Developers",
      description: "",
      ogImageSrc: "",
      canonical: ""
    }
  }
);

export default PlasmicDevelopers;
/* prettier-ignore-end */
