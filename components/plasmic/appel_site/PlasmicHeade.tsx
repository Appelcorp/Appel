// @ts-nocheck
/* eslint-disable */
/* tslint:disable */
/* prettier-ignore-start */

/** @jsxRuntime classic */
/** @jsx createPlasmicElementProxy */
/** @jsxFrag React.Fragment */

// This class is auto-generated by Plasmic; please do not edit!
// Plasmic Project: wBRmoS7Qf8danpDnoXZLVz
// Component: SVZGM5FMLbLU

import * as React from "react";

import Head from "next/head";
import Link, { LinkProps } from "next/link";
import { useRouter } from "next/router";

import {
  Flex as Flex__,
  MultiChoiceArg,
  PlasmicDataSourceContextProvider as PlasmicDataSourceContextProvider__,
  PlasmicIcon as PlasmicIcon__,
  PlasmicImg as PlasmicImg__,
  PlasmicLink as PlasmicLink__,
  PlasmicPageGuard as PlasmicPageGuard__,
  SingleBooleanChoiceArg,
  SingleChoiceArg,
  Stack as Stack__,
  StrictProps,
  Trans as Trans__,
  classNames,
  createPlasmicElementProxy,
  deriveRenderOpts,
  ensureGlobalVariants,
  generateOnMutateForSpec,
  generateStateOnChangeProp,
  generateStateOnChangePropForCodeComponents,
  generateStateValueProp,
  get as $stateGet,
  hasVariant,
  initializeCodeComponentStates,
  initializePlasmicStates,
  makeFragment,
  omit,
  pick,
  renderPlasmicSlot,
  set as $stateSet,
  useCurrentUser,
  useDollarState,
  usePlasmicTranslator,
  useTrigger,
  wrapWithClassName
} from "@plasmicapp/react-web";
import {
  DataCtxReader as DataCtxReader__,
  useDataEnv,
  useGlobalActions
} from "@plasmicapp/react-web/lib/host";

import Button from "../../Button"; // plasmic-import: 2YS4YxHJgFKju/component

import { useScreenVariants as useScreenVariantseH80Ck18IRB } from "./PlasmicGlobalVariant__Screen"; // plasmic-import: -eH80ck18iR_B/globalVariant

import "@plasmicapp/react-web/lib/plasmic.css";

import plasmic_library_plasmic_color_type_css from "../library_plasmic_color_type/plasmic_library_plasmic_color_type.module.css"; // plasmic-import: seaQhLVS4bbjiGvJJrRwyL/projectcss
import plasmic_antd_5_hostless_css from "../antd_5_hostless/plasmic_antd_5_hostless.module.css"; // plasmic-import: ohDidvG9XsCeFumugENU3J/projectcss
import projectcss from "./plasmic_appel_site.module.css"; // plasmic-import: wBRmoS7Qf8danpDnoXZLVz/projectcss
import sty from "./PlasmicHeade.module.css"; // plasmic-import: SVZGM5FMLbLU/css

import ChecksvgIcon from "./icons/PlasmicIcon__Checksvg"; // plasmic-import: nWUWSgWJ4hmrU/icon
import Icon38Icon from "./icons/PlasmicIcon__Icon38"; // plasmic-import: tjW8u0N4RQb/icon

createPlasmicElementProxy;

export type PlasmicHeade__VariantMembers = {};
export type PlasmicHeade__VariantsArgs = {};
type VariantPropType = keyof PlasmicHeade__VariantsArgs;
export const PlasmicHeade__VariantProps = new Array<VariantPropType>();

export type PlasmicHeade__ArgsType = {};
type ArgPropType = keyof PlasmicHeade__ArgsType;
export const PlasmicHeade__ArgProps = new Array<ArgPropType>();

export type PlasmicHeade__OverridesType = {
  root?: Flex__<"div">;
  link?: Flex__<"a"> & Partial<LinkProps>;
};

export interface DefaultHeadeProps {
  className?: string;
}

const $$ = {};

function useNextRouter() {
  try {
    return useRouter();
  } catch {}
  return undefined;
}

function PlasmicHeade__RenderFunc(props: {
  variants: PlasmicHeade__VariantsArgs;
  args: PlasmicHeade__ArgsType;
  overrides: PlasmicHeade__OverridesType;
  forNode?: string;
}) {
  const { variants, overrides, forNode } = props;

  const args = React.useMemo(() => Object.assign({}, props.args), [props.args]);

  const $props = {
    ...args,
    ...variants
  };

  const __nextRouter = useNextRouter();
  const $ctx = useDataEnv?.() || {};
  const refsRef = React.useRef({});
  const $refs = refsRef.current;

  const globalVariants = ensureGlobalVariants({
    screen: useScreenVariantseH80Ck18IRB()
  });

  return (
    <div
      data-plasmic-name={"root"}
      data-plasmic-override={overrides.root}
      data-plasmic-root={true}
      data-plasmic-for-node={forNode}
      className={classNames(
        projectcss.all,
        projectcss.root_reset,
        projectcss.plasmic_default_styles,
        projectcss.plasmic_mixins,
        projectcss.plasmic_tokens,
        plasmic_library_plasmic_color_type_css.plasmic_tokens,
        plasmic_antd_5_hostless_css.plasmic_tokens,
        sty.root
      )}
    >
      <div className={classNames(projectcss.all, sty.freeBox__uj4Xq)}>
        <Stack__
          as={"div"}
          hasGap={true}
          className={classNames(projectcss.all, sty.freeBox__u6I8S)}
        >
          <Stack__
            as={"div"}
            hasGap={true}
            className={classNames(projectcss.all, sty.freeBox__ppTbn)}
          >
            <div
              className={classNames(
                projectcss.all,
                projectcss.__wab_text,
                sty.text__guik3
              )}
              onClick={async event => {
                const $steps = {};

                $steps["goToHome"] = true
                  ? (() => {
                      const actionArgs = { destination: `/` };
                      return (({ destination }) => {
                        if (
                          typeof destination === "string" &&
                          destination.startsWith("#")
                        ) {
                          document
                            .getElementById(destination.substr(1))
                            .scrollIntoView({ behavior: "smooth" });
                        } else {
                          __nextRouter?.push(destination);
                        }
                      })?.apply(null, [actionArgs]);
                    })()
                  : undefined;
                if (
                  $steps["goToHome"] != null &&
                  typeof $steps["goToHome"] === "object" &&
                  typeof $steps["goToHome"].then === "function"
                ) {
                  $steps["goToHome"] = await $steps["goToHome"];
                }
              }}
            >
              {"\u212e"}
            </div>
            <Stack__
              as={"div"}
              hasGap={true}
              className={classNames(projectcss.all, sty.freeBox__q9MOb)}
            >
              <Button
                className={classNames("__wab_instance", sty.button__s39Z)}
                color={"clear"}
                endIcon={
                  <Icon38Icon
                    className={classNames(projectcss.all, sty.svg__o5Qyl)}
                    role={"img"}
                  />
                }
                startIcon={
                  <ChecksvgIcon
                    className={classNames(projectcss.all, sty.svg__pL1K7)}
                    role={"img"}
                  />
                }
                submitsForm={true}
              >
                <div
                  className={classNames(
                    projectcss.all,
                    projectcss.__wab_text,
                    sty.text___8Bhqc
                  )}
                >
                  {"Store"}
                </div>
              </Button>
              <Button
                className={classNames("__wab_instance", sty.button__oeLwu)}
                color={"clear"}
                endIcon={
                  <Icon38Icon
                    className={classNames(projectcss.all, sty.svg__slC7)}
                    role={"img"}
                  />
                }
                link={`/shop/appel`}
                startIcon={
                  <ChecksvgIcon
                    className={classNames(projectcss.all, sty.svg__xTezv)}
                    role={"img"}
                  />
                }
                submitsForm={true}
              >
                <div
                  className={classNames(
                    projectcss.all,
                    projectcss.__wab_text,
                    sty.text__okO0T
                  )}
                >
                  {"Appel"}
                </div>
              </Button>
              <Button
                className={classNames("__wab_instance", sty.button___3BCdm)}
                color={"clear"}
                endIcon={
                  <Icon38Icon
                    className={classNames(projectcss.all, sty.svg__lU61W)}
                    role={"img"}
                  />
                }
                link={`/shop/epad`}
                startIcon={
                  <ChecksvgIcon
                    className={classNames(projectcss.all, sty.svg__wjYoK)}
                    role={"img"}
                  />
                }
                submitsForm={true}
              >
                <div
                  className={classNames(
                    projectcss.all,
                    projectcss.__wab_text,
                    sty.text__mrDzp
                  )}
                >
                  {"ePad"}
                </div>
              </Button>
              <Button
                className={classNames("__wab_instance", sty.button__k9C)}
                color={"clear"}
                endIcon={
                  <Icon38Icon
                    className={classNames(projectcss.all, sty.svg__m4Cjh)}
                    role={"img"}
                  />
                }
                link={`/shop/etop`}
                startIcon={
                  <ChecksvgIcon
                    className={classNames(projectcss.all, sty.svg___3U2Aj)}
                    role={"img"}
                  />
                }
                submitsForm={true}
              >
                <div
                  className={classNames(
                    projectcss.all,
                    projectcss.__wab_text,
                    sty.text__ifTo
                  )}
                >
                  {"eTop"}
                </div>
              </Button>
              <Button
                className={classNames("__wab_instance", sty.button___1QlQj)}
                color={"clear"}
                endIcon={
                  <Icon38Icon
                    className={classNames(projectcss.all, sty.svg__qwZIp)}
                    role={"img"}
                  />
                }
                startIcon={
                  <ChecksvgIcon
                    className={classNames(projectcss.all, sty.svg__yheQu)}
                    role={"img"}
                  />
                }
                submitsForm={true}
              >
                <div
                  className={classNames(
                    projectcss.all,
                    projectcss.__wab_text,
                    sty.text__xwwG4
                  )}
                >
                  {"InVision"}
                </div>
              </Button>
              <Button
                className={classNames("__wab_instance", sty.button__akenu)}
                color={"clear"}
                endIcon={
                  <Icon38Icon
                    className={classNames(projectcss.all, sty.svg__lckjJ)}
                    role={"img"}
                  />
                }
                startIcon={
                  <ChecksvgIcon
                    className={classNames(projectcss.all, sty.svg__t6XaV)}
                    role={"img"}
                  />
                }
                submitsForm={true}
              >
                <div
                  className={classNames(
                    projectcss.all,
                    projectcss.__wab_text,
                    sty.text___8NkPx
                  )}
                >
                  {"eMax"}
                </div>
              </Button>
              <Button
                className={classNames("__wab_instance", sty.button__ihEUr)}
                color={"clear"}
                endIcon={
                  <Icon38Icon
                    className={classNames(projectcss.all, sty.svg___0Mejk)}
                    role={"img"}
                  />
                }
                link={`/login`}
                startIcon={
                  <ChecksvgIcon
                    className={classNames(projectcss.all, sty.svg__u6Bfn)}
                    role={"img"}
                  />
                }
                submitsForm={true}
              >
                <div
                  className={classNames(
                    projectcss.all,
                    projectcss.__wab_text,
                    sty.text__dUsP
                  )}
                >
                  {"Log in"}
                </div>
              </Button>
              <Button
                className={classNames("__wab_instance", sty.button__k82Bo)}
                endIcon={
                  <Icon38Icon
                    className={classNames(projectcss.all, sty.svg__hxKaC)}
                    role={"img"}
                  />
                }
                startIcon={
                  <ChecksvgIcon
                    className={classNames(projectcss.all, sty.svg__eiXZj)}
                    role={"img"}
                  />
                }
                submitsForm={true}
              >
                <div
                  className={classNames(
                    projectcss.all,
                    projectcss.__wab_text,
                    sty.text__p3Imb
                  )}
                >
                  {"Sign up"}
                </div>
              </Button>
            </Stack__>
            {false ? (
              <div className={classNames(projectcss.all, sty.freeBox___9RXwz)}>
                <button
                  className={classNames(
                    projectcss.all,
                    projectcss.button,
                    projectcss.__wab_text,
                    sty.button__innhk
                  )}
                >
                  {"Sign up"}
                </button>
                <Button
                  className={classNames("__wab_instance", sty.button___0Dgxz)}
                  color={"clear"}
                  endIcon={
                    <Icon38Icon
                      className={classNames(projectcss.all, sty.svg__fu8Os)}
                      role={"img"}
                    />
                  }
                  startIcon={
                    <ChecksvgIcon
                      className={classNames(projectcss.all, sty.svg__vHrnd)}
                      role={"img"}
                    />
                  }
                  submitsForm={true}
                >
                  <div
                    className={classNames(
                      projectcss.all,
                      projectcss.__wab_text,
                      sty.text__bBq5J
                    )}
                  >
                    {"Log in"}
                  </div>
                </Button>
              </div>
            ) : null}
          </Stack__>
          <div className={classNames(projectcss.all, sty.freeBox__v5Zv5)}>
            <div
              className={classNames(
                projectcss.all,
                projectcss.__wab_text,
                sty.text__r4X6O
              )}
            >
              {
                "Get 20% to 50% off your next Appel Phone when trading in any iPhone.*"
              }
            </div>
            <PlasmicLink__
              data-plasmic-name={"link"}
              data-plasmic-override={overrides.link}
              className={classNames(
                projectcss.all,
                projectcss.a,
                projectcss.__wab_text,
                sty.link
              )}
              component={Link}
              href={`/shop/appel`}
              platform={"nextjs"}
            >
              {" Shop Appel >"}
            </PlasmicLink__>
          </div>
        </Stack__>
      </div>
    </div>
  ) as React.ReactElement | null;
}

const PlasmicDescendants = {
  root: ["root", "link"],
  link: ["link"]
} as const;
type NodeNameType = keyof typeof PlasmicDescendants;
type DescendantsType<T extends NodeNameType> =
  (typeof PlasmicDescendants)[T][number];
type NodeDefaultElementType = {
  root: "div";
  link: "a";
};

type ReservedPropsType = "variants" | "args" | "overrides";
type NodeOverridesType<T extends NodeNameType> = Pick<
  PlasmicHeade__OverridesType,
  DescendantsType<T>
>;
type NodeComponentProps<T extends NodeNameType> =
  // Explicitly specify variants, args, and overrides as objects
  {
    variants?: PlasmicHeade__VariantsArgs;
    args?: PlasmicHeade__ArgsType;
    overrides?: NodeOverridesType<T>;
  } & Omit<PlasmicHeade__VariantsArgs, ReservedPropsType> & // Specify variants directly as props
    /* Specify args directly as props*/ Omit<
      PlasmicHeade__ArgsType,
      ReservedPropsType
    > &
    /* Specify overrides for each element directly as props*/ Omit<
      NodeOverridesType<T>,
      ReservedPropsType | VariantPropType | ArgPropType
    > &
    /* Specify props for the root element*/ Omit<
      Partial<React.ComponentProps<NodeDefaultElementType[T]>>,
      ReservedPropsType | VariantPropType | ArgPropType | DescendantsType<T>
    >;

function makeNodeComponent<NodeName extends NodeNameType>(nodeName: NodeName) {
  type PropsType = NodeComponentProps<NodeName> & { key?: React.Key };
  const func = function <T extends PropsType>(
    props: T & StrictProps<T, PropsType>
  ) {
    const { variants, args, overrides } = React.useMemo(
      () =>
        deriveRenderOpts(props, {
          name: nodeName,
          descendantNames: PlasmicDescendants[nodeName],
          internalArgPropNames: PlasmicHeade__ArgProps,
          internalVariantPropNames: PlasmicHeade__VariantProps
        }),
      [props, nodeName]
    );
    return PlasmicHeade__RenderFunc({
      variants,
      args,
      overrides,
      forNode: nodeName
    });
  };
  if (nodeName === "root") {
    func.displayName = "PlasmicHeade";
  } else {
    func.displayName = `PlasmicHeade.${nodeName}`;
  }
  return func;
}

export const PlasmicHeade = Object.assign(
  // Top-level PlasmicHeade renders the root element
  makeNodeComponent("root"),
  {
    // Helper components rendering sub-elements
    link: makeNodeComponent("link"),

    // Metadata about props expected for PlasmicHeade
    internalVariantProps: PlasmicHeade__VariantProps,
    internalArgProps: PlasmicHeade__ArgProps
  }
);

export default PlasmicHeade;
/* prettier-ignore-end */
