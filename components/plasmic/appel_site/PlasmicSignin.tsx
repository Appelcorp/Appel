// @ts-nocheck
/* eslint-disable */
/* tslint:disable */
/* prettier-ignore-start */

/** @jsxRuntime classic */
/** @jsx createPlasmicElementProxy */
/** @jsxFrag React.Fragment */

// This class is auto-generated by Plasmic; please do not edit!
// Plasmic Project: wBRmoS7Qf8danpDnoXZLVz
// Component: j8YYwCAE9xY

import * as React from "react";

import Head from "next/head";
import Link, { LinkProps } from "next/link";
import { useRouter } from "next/router";

import * as p from "@plasmicapp/react-web";
import * as ph from "@plasmicapp/react-web/lib/host";

import {
  hasVariant,
  classNames,
  wrapWithClassName,
  createPlasmicElementProxy,
  makeFragment,
  MultiChoiceArg,
  SingleBooleanChoiceArg,
  SingleChoiceArg,
  pick,
  omit,
  useTrigger,
  StrictProps,
  deriveRenderOpts,
  ensureGlobalVariants
} from "@plasmicapp/react-web";
import Button from "../../Button"; // plasmic-import: 2YS4YxHJgFKju/component
import Footer from "../../Footer"; // plasmic-import: O8jRJZzkmVNu/component

import { useScreenVariants as useScreenVariantseH80Ck18IRB } from "./PlasmicGlobalVariant__Screen"; // plasmic-import: -eH80ck18iR_B/globalVariant

import "@plasmicapp/react-web/lib/plasmic.css";

import plasmic_library_plasmic_color_type_css from "../library_plasmic_color_type/plasmic_library_plasmic_color_type.module.css"; // plasmic-import: seaQhLVS4bbjiGvJJrRwyL/projectcss
import projectcss from "./plasmic_appel_site.module.css"; // plasmic-import: wBRmoS7Qf8danpDnoXZLVz/projectcss
import sty from "./PlasmicSignin.module.css"; // plasmic-import: j8YYwCAE9xY/css

import ChecksvgIcon from "./icons/PlasmicIcon__Checksvg"; // plasmic-import: nWUWSgWJ4hmrU/icon
import Icon38Icon from "./icons/PlasmicIcon__Icon38"; // plasmic-import: tjW8u0N4RQb/icon
import BarsIcon from "./icons/PlasmicIcon__Bars"; // plasmic-import: 4ZVpxMLEvcR9y/icon

createPlasmicElementProxy;

export type PlasmicSignin__VariantMembers = {};
export type PlasmicSignin__VariantsArgs = {};
type VariantPropType = keyof PlasmicSignin__VariantsArgs;
export const PlasmicSignin__VariantProps = new Array<VariantPropType>();

export type PlasmicSignin__ArgsType = {};
type ArgPropType = keyof PlasmicSignin__ArgsType;
export const PlasmicSignin__ArgProps = new Array<ArgPropType>();

export type PlasmicSignin__OverridesType = {
  single?: p.Flex<"div">;
  columns?: p.Flex<"div">;
  column?: p.Flex<"div">;
  h1?: p.Flex<"h1">;
  textInput?: p.Flex<"input">;
  passwordInput?: p.Flex<"input">;
  footer?: p.Flex<typeof Footer>;
  textbox?: p.Flex<"input">;
};

export interface DefaultSigninProps {}

const __wrapUserFunction =
  globalThis.__PlasmicWrapUserFunction ?? ((loc, fn) => fn());
const __wrapUserPromise =
  globalThis.__PlasmicWrapUserPromise ??
  (async (loc, promise) => {
    return await promise;
  });

function useNextRouter() {
  try {
    return useRouter();
  } catch {}
  return undefined;
}

function PlasmicSignin__RenderFunc(props: {
  variants: PlasmicSignin__VariantsArgs;
  args: PlasmicSignin__ArgsType;
  overrides: PlasmicSignin__OverridesType;
  forNode?: string;
}) {
  const { variants, overrides, forNode } = props;

  const args = React.useMemo(() => Object.assign({}, props.args), [props.args]);

  const $props = {
    ...args,
    ...variants
  };

  const __nextRouter = useNextRouter();
  const $ctx = ph.useDataEnv?.() || {};
  const refsRef = React.useRef({});
  const $refs = refsRef.current;

  const currentUser = p.useCurrentUser?.() || {};

  const globalVariants = ensureGlobalVariants({
    screen: useScreenVariantseH80Ck18IRB()
  });

  return (
    <React.Fragment>
      <Head>
        <meta name="twitter:card" content="summary" />
        <title key="title">{PlasmicSignin.pageMetadata.title}</title>
        <meta
          key="og:title"
          property="og:title"
          content={PlasmicSignin.pageMetadata.title}
        />
        <meta
          key="twitter:title"
          name="twitter:title"
          content={PlasmicSignin.pageMetadata.title}
        />
      </Head>

      <style>{`
        body {
          margin: 0;
        }
      `}</style>

      <div className={projectcss.plasmic_page_wrapper}>
        <p.Stack
          as={"div"}
          data-plasmic-name={"single"}
          data-plasmic-override={overrides.single}
          data-plasmic-root={true}
          data-plasmic-for-node={forNode}
          hasGap={true}
          className={classNames(
            projectcss.all,
            projectcss.root_reset,
            projectcss.plasmic_default_styles,
            projectcss.plasmic_mixins,
            projectcss.plasmic_tokens,
            plasmic_library_plasmic_color_type_css.plasmic_tokens,
            sty.single
          )}
        >
          {(hasVariant(globalVariants, "screen", "mobile") ? true : false) ? (
            <p.Stack
              as={"div"}
              hasGap={true}
              className={classNames(projectcss.all, sty.freeBox__mrPVb)}
            >
              <p.Stack
                as={"div"}
                hasGap={true}
                className={classNames(projectcss.all, sty.freeBox__xxsSp)}
              >
                <p.PlasmicLink
                  className={classNames(
                    projectcss.all,
                    projectcss.a,
                    projectcss.__wab_text,
                    sty.link__ebxGp
                  )}
                  component={Link}
                  href={`/`}
                  platform={"nextjs"}
                >
                  {"\u212e"}
                </p.PlasmicLink>
                {false ? (
                  <div
                    className={classNames(projectcss.all, sty.freeBox__tmEt)}
                  >
                    <button
                      className={classNames(
                        projectcss.all,
                        projectcss.button,
                        projectcss.__wab_text,
                        sty.button__d7RIs
                      )}
                    >
                      {"Sign up"}
                    </button>
                    {true ? (
                      <Button
                        className={classNames(
                          "__wab_instance",
                          sty.button__kx5V
                        )}
                        color={"clear" as const}
                        endIcon={
                          <Icon38Icon
                            className={classNames(
                              projectcss.all,
                              sty.svg__eFeW5
                            )}
                            role={"img"}
                          />
                        }
                        startIcon={
                          <ChecksvgIcon
                            className={classNames(
                              projectcss.all,
                              sty.svg__kB4MF
                            )}
                            role={"img"}
                          />
                        }
                        submitsForm={true}
                      >
                        <div
                          className={classNames(
                            projectcss.all,
                            projectcss.__wab_text,
                            sty.text__cRiUw
                          )}
                        >
                          {"Log in"}
                        </div>
                      </Button>
                    ) : null}
                  </div>
                ) : null}
                <BarsIcon
                  className={classNames(projectcss.all, sty.svg__mWehT)}
                  role={"img"}
                />
              </p.Stack>
            </p.Stack>
          ) : null}
          {(hasVariant(globalVariants, "screen", "mobile") ? true : true) ? (
            <p.Stack
              as={"div"}
              hasGap={true}
              className={classNames(projectcss.all, sty.freeBox___0Yxc)}
            >
              <p.Stack
                as={"div"}
                hasGap={true}
                className={classNames(projectcss.all, sty.freeBox__jVyEa)}
              >
                <p.PlasmicLink
                  className={classNames(
                    projectcss.all,
                    projectcss.a,
                    projectcss.__wab_text,
                    sty.link__okSjS
                  )}
                  component={Link}
                  href={`/`}
                  platform={"nextjs"}
                >
                  {"\u212e"}
                </p.PlasmicLink>
                <p.Stack
                  as={"div"}
                  hasGap={true}
                  className={classNames(projectcss.all, sty.freeBox__uVy9S)}
                >
                  <Button
                    className={classNames("__wab_instance", sty.button___3TsV6)}
                    color={"clear" as const}
                    endIcon={
                      <Icon38Icon
                        className={classNames(projectcss.all, sty.svg__juMe8)}
                        role={"img"}
                      />
                    }
                    startIcon={
                      <ChecksvgIcon
                        className={classNames(projectcss.all, sty.svg__zTjIk)}
                        role={"img"}
                      />
                    }
                    submitsForm={true}
                  >
                    <div
                      className={classNames(
                        projectcss.all,
                        projectcss.__wab_text,
                        sty.text__po7Ms
                      )}
                    >
                      {"Store"}
                    </div>
                  </Button>
                  <Button
                    className={classNames("__wab_instance", sty.button__qcsHs)}
                    color={"clear" as const}
                    endIcon={
                      <Icon38Icon
                        className={classNames(projectcss.all, sty.svg__dnysQ)}
                        role={"img"}
                      />
                    }
                    link={`/shop/appel`}
                    startIcon={
                      <ChecksvgIcon
                        className={classNames(projectcss.all, sty.svg__fgrF)}
                        role={"img"}
                      />
                    }
                    submitsForm={true}
                  >
                    <div
                      className={classNames(
                        projectcss.all,
                        projectcss.__wab_text,
                        sty.text__lGyxw
                      )}
                    >
                      {"Appel"}
                    </div>
                  </Button>
                  <Button
                    className={classNames("__wab_instance", sty.button__gYhGu)}
                    color={"clear" as const}
                    endIcon={
                      <Icon38Icon
                        className={classNames(projectcss.all, sty.svg__sfKno)}
                        role={"img"}
                      />
                    }
                    link={`/shop/epad`}
                    startIcon={
                      <ChecksvgIcon
                        className={classNames(projectcss.all, sty.svg___7YRgA)}
                        role={"img"}
                      />
                    }
                    submitsForm={true}
                  >
                    <div
                      className={classNames(
                        projectcss.all,
                        projectcss.__wab_text,
                        sty.text__veoG
                      )}
                    >
                      {"ePad"}
                    </div>
                  </Button>
                  <Button
                    className={classNames("__wab_instance", sty.button__fpBo1)}
                    color={"clear" as const}
                    endIcon={
                      <Icon38Icon
                        className={classNames(projectcss.all, sty.svg__caHdC)}
                        role={"img"}
                      />
                    }
                    link={`/shop/etop`}
                    startIcon={
                      <ChecksvgIcon
                        className={classNames(projectcss.all, sty.svg__gqkp)}
                        role={"img"}
                      />
                    }
                    submitsForm={true}
                  >
                    <div
                      className={classNames(
                        projectcss.all,
                        projectcss.__wab_text,
                        sty.text__p8LWr
                      )}
                    >
                      {"eTop"}
                    </div>
                  </Button>
                  <Button
                    className={classNames("__wab_instance", sty.button__nCjPf)}
                    color={"clear" as const}
                    endIcon={
                      <Icon38Icon
                        className={classNames(projectcss.all, sty.svg__oAsVb)}
                        role={"img"}
                      />
                    }
                    startIcon={
                      <ChecksvgIcon
                        className={classNames(projectcss.all, sty.svg__b8BEr)}
                        role={"img"}
                      />
                    }
                    submitsForm={true}
                  >
                    <div
                      className={classNames(
                        projectcss.all,
                        projectcss.__wab_text,
                        sty.text__s9UkR
                      )}
                    >
                      {"eMax"}
                    </div>
                  </Button>
                  {(
                    hasVariant(globalVariants, "screen", "mobile") ? true : true
                  ) ? (
                    <Button
                      className={classNames(
                        "__wab_instance",
                        sty.button__pkNkO
                      )}
                      color={"clear" as const}
                      endIcon={
                        <Icon38Icon
                          className={classNames(projectcss.all, sty.svg__ghNuV)}
                          role={"img"}
                        />
                      }
                      link={`/login`}
                      startIcon={
                        <ChecksvgIcon
                          className={classNames(projectcss.all, sty.svg__tpms7)}
                          role={"img"}
                        />
                      }
                      submitsForm={true}
                    >
                      <div
                        className={classNames(
                          projectcss.all,
                          projectcss.__wab_text,
                          sty.text___1ZpLe
                        )}
                      >
                        {"Log in"}
                      </div>
                    </Button>
                  ) : null}
                  <Button
                    className={classNames("__wab_instance", sty.button__eQk1X)}
                    endIcon={
                      <Icon38Icon
                        className={classNames(projectcss.all, sty.svg__zkJ96)}
                        role={"img"}
                      />
                    }
                    startIcon={
                      <ChecksvgIcon
                        className={classNames(projectcss.all, sty.svg___5PcHa)}
                        role={"img"}
                      />
                    }
                    submitsForm={true}
                  >
                    <div
                      className={classNames(
                        projectcss.all,
                        projectcss.__wab_text,
                        sty.text__pu7Mi
                      )}
                    >
                      {"Sign up"}
                    </div>
                  </Button>
                </p.Stack>
                {false ? (
                  <div
                    className={classNames(projectcss.all, sty.freeBox__mekX3)}
                  >
                    <button
                      className={classNames(
                        projectcss.all,
                        projectcss.button,
                        projectcss.__wab_text,
                        sty.button__oIl6
                      )}
                    >
                      {"Sign up"}
                    </button>
                    {true ? (
                      <Button
                        className={classNames(
                          "__wab_instance",
                          sty.button__j1Bb9
                        )}
                        color={"clear" as const}
                        endIcon={
                          <Icon38Icon
                            className={classNames(
                              projectcss.all,
                              sty.svg__e7Qg
                            )}
                            role={"img"}
                          />
                        }
                        startIcon={
                          <ChecksvgIcon
                            className={classNames(
                              projectcss.all,
                              sty.svg___6YgEg
                            )}
                            role={"img"}
                          />
                        }
                        submitsForm={true}
                      >
                        <div
                          className={classNames(
                            projectcss.all,
                            projectcss.__wab_text,
                            sty.text__k7XsE
                          )}
                        >
                          {"Log in"}
                        </div>
                      </Button>
                    ) : null}
                  </div>
                ) : null}
              </p.Stack>
            </p.Stack>
          ) : null}
          {true ? (
            <p.Stack
              as={"div"}
              hasGap={true}
              className={classNames(projectcss.all, sty.freeBox__iUlou)}
            >
              <div className={classNames(projectcss.all, sty.freeBox__rq3K5)}>
                <div
                  data-plasmic-name={"columns"}
                  data-plasmic-override={overrides.columns}
                  className={classNames(projectcss.all, sty.columns)}
                >
                  <p.Stack
                    as={"div"}
                    data-plasmic-name={"column"}
                    data-plasmic-override={overrides.column}
                    hasGap={true}
                    className={classNames(projectcss.all, sty.column)}
                  >
                    <h1
                      data-plasmic-name={"h1"}
                      data-plasmic-override={overrides.h1}
                      className={classNames(
                        projectcss.all,
                        projectcss.h1,
                        projectcss.__wab_text,
                        sty.h1
                      )}
                    >
                      {"Appel ID"}
                    </h1>
                    <div
                      className={classNames(
                        projectcss.all,
                        projectcss.__wab_text,
                        sty.text___55ErY
                      )}
                    >
                      {"Sign in to make shopping easier."}
                    </div>
                    {(
                      hasVariant(globalVariants, "screen", "mobile")
                        ? true
                        : true
                    ) ? (
                      <p.Stack
                        as={"div"}
                        hasGap={true}
                        className={classNames(
                          projectcss.all,
                          sty.freeBox__c9Qa8
                        )}
                      >
                        <input
                          data-plasmic-name={"textInput"}
                          data-plasmic-override={
                            overrides.textInput ?? overrides.textbox
                          }
                          autoComplete={"username" as const}
                          className={classNames(
                            projectcss.all,
                            projectcss.input,
                            sty.textInput
                          )}
                          placeholder={"Username" as const}
                          size={1 as const}
                          type={"text" as const}
                          value={"" as const}
                        />

                        <input
                          data-plasmic-name={"passwordInput"}
                          data-plasmic-override={overrides.passwordInput}
                          autoComplete={"current-password" as const}
                          className={classNames(
                            projectcss.all,
                            projectcss.input,
                            sty.passwordInput
                          )}
                          name={"" as const}
                          placeholder={"Password" as const}
                          size={1 as const}
                          type={"password" as const}
                          value={"" as const}
                        />

                        {true ? (
                          <div
                            className={classNames(
                              projectcss.all,
                              sty.freeBox__bQaEs
                            )}
                          >
                            <Button
                              className={classNames(
                                "__wab_instance",
                                sty.button__amRyG
                              )}
                              submitsForm={true}
                            >
                              {"Sign In"}
                            </Button>
                          </div>
                        ) : null}
                      </p.Stack>
                    ) : null}
                  </p.Stack>
                </div>
              </div>
            </p.Stack>
          ) : null}
          <Footer
            data-plasmic-name={"footer"}
            data-plasmic-override={overrides.footer}
            className={classNames("__wab_instance", sty.footer)}
          />
        </p.Stack>
      </div>
    </React.Fragment>
  ) as React.ReactElement | null;
}

const PlasmicDescendants = {
  single: [
    "single",
    "columns",
    "column",
    "h1",
    "textInput",
    "textbox",
    "passwordInput",
    "footer"
  ],
  columns: ["columns", "column", "h1", "textInput", "textbox", "passwordInput"],
  column: ["column", "h1", "textInput", "textbox", "passwordInput"],
  h1: ["h1"],
  textInput: ["textInput", "textbox"],
  passwordInput: ["passwordInput"],
  footer: ["footer"]
} as const;
type NodeNameType = keyof typeof PlasmicDescendants;
type DescendantsType<T extends NodeNameType> =
  typeof PlasmicDescendants[T][number];
type NodeDefaultElementType = {
  single: "div";
  columns: "div";
  column: "div";
  h1: "h1";
  textInput: "input";
  passwordInput: "input";
  footer: typeof Footer;
};

type ReservedPropsType = "variants" | "args" | "overrides";
type NodeOverridesType<T extends NodeNameType> = Pick<
  PlasmicSignin__OverridesType,
  DescendantsType<T>
>;
type NodeComponentProps<T extends NodeNameType> =
  // Explicitly specify variants, args, and overrides as objects
  {
    variants?: PlasmicSignin__VariantsArgs;
    args?: PlasmicSignin__ArgsType;
    overrides?: NodeOverridesType<T>;
  } & Omit<PlasmicSignin__VariantsArgs, ReservedPropsType> & // Specify variants directly as props
    /* Specify args directly as props*/ Omit<
      PlasmicSignin__ArgsType,
      ReservedPropsType
    > &
    /* Specify overrides for each element directly as props*/ Omit<
      NodeOverridesType<T>,
      ReservedPropsType | VariantPropType | ArgPropType
    > &
    /* Specify props for the root element*/ Omit<
      Partial<React.ComponentProps<NodeDefaultElementType[T]>>,
      ReservedPropsType | VariantPropType | ArgPropType | DescendantsType<T>
    >;

function makeNodeComponent<NodeName extends NodeNameType>(nodeName: NodeName) {
  type PropsType = NodeComponentProps<NodeName> & { key?: React.Key };
  const func = function <T extends PropsType>(
    props: T & StrictProps<T, PropsType>
  ) {
    const { variants, args, overrides } = React.useMemo(
      () =>
        deriveRenderOpts(props, {
          name: nodeName,
          descendantNames: [...PlasmicDescendants[nodeName]],
          internalArgPropNames: PlasmicSignin__ArgProps,
          internalVariantPropNames: PlasmicSignin__VariantProps
        }),
      [props, nodeName]
    );
    return PlasmicSignin__RenderFunc({
      variants,
      args,
      overrides,
      forNode: nodeName
    });
  };
  if (nodeName === "single") {
    func.displayName = "PlasmicSignin";
  } else {
    func.displayName = `PlasmicSignin.${nodeName}`;
  }
  return func;
}

export const PlasmicSignin = Object.assign(
  // Top-level PlasmicSignin renders the root element
  makeNodeComponent("single"),
  {
    // Helper components rendering sub-elements
    columns: makeNodeComponent("columns"),
    column: makeNodeComponent("column"),
    h1: makeNodeComponent("h1"),
    textInput: makeNodeComponent("textInput"),
    passwordInput: makeNodeComponent("passwordInput"),
    footer: makeNodeComponent("footer"),

    // Metadata about props expected for PlasmicSignin
    internalVariantProps: PlasmicSignin__VariantProps,
    internalArgProps: PlasmicSignin__ArgProps,

    // Page metadata
    pageMetadata: {
      title: "Appel ID",
      description: "",
      ogImageSrc: "",
      canonical: ""
    }
  }
);

export default PlasmicSignin;
/* prettier-ignore-end */
